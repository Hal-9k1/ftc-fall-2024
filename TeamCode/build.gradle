//
// build.gradle in TeamCode
//
// Most of the definitions for building your module reside in a common, shared
// file 'build.common.gradle'. Being factored in this way makes it easier to
// integrate updates to the FTC into your code. If you really need to customize
// the build definitions, you can place those customizations in this file, but
// please think carefully as to whether such customizations are really necessary
// before doing so.


// Custom definitions may go here
plugins {
  id 'checkstyle'
}

tasks.register('createResolvableReleaseCompileClasspath') {
  configurations.create('resolvableReleaseCompileClasspath') {
    configurations.releaseCompileClasspath.allDependencies.forEach {
      if (it instanceof ProjectDependency) {
        evaluationDependsOn(it.dependencyProject.path)
      } else {
        dependencies.add(it)
      }
    }
  }
}
FileCollection javadocClasspath = files()
tasks.register('createJavadocClasspath') {
  dependsOn(tasks.createResolvableReleaseCompileClasspath)
    configurations.resolvableReleaseCompileClasspath.forEach {
    String path = it.getPath()
    if (path.endsWith('aar')) {
      javadocClasspath = (javadocClasspath
        + zipTree(path).matching(new PatternSet().include('classes.jar')))
    } else if (path.endsWith('jar')) {
      javadocClasspath = javadocClasspath + files(it)
    } else {
      throw new RuntimeException("Can't handle artifact type: '" + path + "'")
    }
  }
}
tasks.register('javadoc', Javadoc) {
  dependsOn(tasks.createJavadocClasspath)
  source = 'src/main/java'
  classpath = javadocClasspath
  title = '22047 TeamCode'
  destinationDir = layout.buildDirectory.dir('reports/docs').get().getAsFile()
  options {
    header = 'FTC 22047 "Tell-Tale Parts"'
    memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PRIVATE
  }
}

// Include common definitions from above.
apply from: '../build.common.gradle'
apply from: '../build.dependencies.gradle'


android {
    namespace = 'org.firstinspires.ftc.teamcode'

    packagingOptions {
        jniLibs.useLegacyPackaging true
    }
}

dependencies {
    implementation project(':FtcRobotController')
}
